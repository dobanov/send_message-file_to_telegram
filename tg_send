#include <iostream>
#include <curl/curl.h>

using namespace std;

size_t writeCallback(char* contents, size_t size, size_t nmemb, void* userp) {
    return size * nmemb;
}

void sendTextToTelegram(string botId, string chatId, string message) {
    CURL* curl = curl_easy_init();
    if (curl) {
        string url = "https://api.telegram.org/bot" + botId + "/sendMessage";
        string data = "chat_id=" + chatId + "&text=" + message;
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeCallback);
        curl_easy_perform(curl);
        curl_easy_cleanup(curl);
    }
}

void sendFileToTelegram(string botId, string chatId, string filePath) {
    CURL* curl = curl_easy_init();
    if (curl) {
        struct curl_httppost* formpost = NULL;
        struct curl_httppost* lastptr = NULL;

        curl_formadd(&formpost, &lastptr, CURLFORM_COPYNAME, "chat_id", CURLFORM_COPYCONTENTS, chatId.c_str(), CURLFORM_END);
        curl_formadd(&formpost, &lastptr, CURLFORM_COPYNAME, "document", CURLFORM_FILE, filePath.c_str(), CURLFORM_END);

        string url = "https://api.telegram.org/bot" + botId + "/sendDocument";
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPPOST, formpost);
        curl_easy_perform(curl);

        curl_formfree(formpost);
        curl_easy_cleanup(curl);
    }
}

int main(int argc, char* argv[]) {
    if (argc != 4) {
        cerr << "Usage: " << argv[0] << " <bot_id> <chat_id> <message_or_file_path>" << endl;
        return 1;
    }

    string botId = argv[1];
    string chatId = argv[2];
    string input = argv[3];

    if (input.find(".") != string::npos) {
        // Assume input is a file path
        sendFileToTelegram(botId, chatId, input);
    } else {
        // Assume input is a message
        sendTextToTelegram(botId, chatId, input);
    }

    return 0;
}
